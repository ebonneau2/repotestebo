package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class determinationMailEquivalent {

    /**
     * mailEquivalent: détermination du mail équivalent, ie du mail contenant regis-dgac
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("mailEquivalentLdapAngelique") mailEquivalentLdapAngelique
     * 
     */
    public static String mailEquivalent(String mailEquivalentLdapAngelique) {
    	String extractDebutMailEquivalent="";
    	String extractFinMailEquivalent="";
    	String extractMailEquivalent="";
    	if((mailEquivalentLdapAngelique != null) && !(mailEquivalentLdapAngelique.isEmpty())){
    		if (mailEquivalentLdapAngelique.contains("regis-dgac")) {
    			extractDebutMailEquivalent = mailEquivalentLdapAngelique.substring(0, mailEquivalentLdapAngelique.indexOf("regis"));
    			extractFinMailEquivalent = mailEquivalentLdapAngelique.substring(mailEquivalentLdapAngelique.indexOf("regis"));
    			if(extractDebutMailEquivalent.lastIndexOf(";")>0) {
    				extractDebutMailEquivalent = extractDebutMailEquivalent.substring(extractDebutMailEquivalent.lastIndexOf(";")+1);
    			}
    			if(extractFinMailEquivalent.indexOf(";") > 0) {
    				extractFinMailEquivalent = extractFinMailEquivalent.substring(0,extractFinMailEquivalent.indexOf(";"));
    			}
    			extractMailEquivalent = extractDebutMailEquivalent.concat(extractFinMailEquivalent);
        }
    	}
    	return extractMailEquivalent;
    }
}
